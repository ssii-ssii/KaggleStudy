geom_bar(stat="identity", fill="#53cfff") +
coord_flip() +
theme_light(base_size=20) +
xlab("") +
ylab("Importance") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title=element_text(size=18))
ggsave("2_feature_importance.png", p)
# This script trains a Random Forest model based on the data,
# saves a sample submission, and plots the relative importance
# of the variables in making predictions
# Download 1_random_forest_r_submission.csv from the output below
# and submit it through https://www.kaggle.com/c/titanic-gettingStarted/submissions/attach
# to enter this getting started competition!
#library繧定ｪｭ縺ｿ霎ｼ繧
library(ggplot2)
library(randomForest)
#library繧定ｪｭ縺ｿ霎ｼ繧
#set.seed縺ｯ荵ｱ謨ｰ繧定ｨ俶?ｶ縺励※縺翫￥陬?鄂ｮ
set.seed(1)
#train data縺ｨtest data繧定ｪｭ縺ｿ霎ｼ繧
train <- read.csv("../data/train.csv", stringsAsFactors=FALSE)
test  <- read.csv("../data/test.csv",  stringsAsFactors=FALSE)
#extractFeatures()縺ｨ縺?縺?髢｢謨ｰ繧貞ｮ夂ｾｩ縺吶ｋ
#蜷?螟画焚繧断reatures縺ｧ縺ｾ縺ｨ繧√ｋ
extractFeatures <- function(data) {
features <- c("Pclass",
"Age",
"Sex",
"Parch",
"SibSp",
"Fare",
"Embarked")
fea <- data[,features]
# NA縺ｫ-1繧剃ｻ｣蜈･
fea$Age[is.na(fea$Age)] <- -1
# NA縺ｫ驕玖ｳ?縺ｮ荳ｭ螟ｮ蛟､繧剃ｻ｣蜈･
fea$Fare[is.na(fea$Fare)] <- median(fea$Fare, na.rm=TRUE)
# ==""縺ｧ譁?蟄怜?励°縺ｩ縺?縺九ｒ蛻､螳壹５rue縺ｪ繧会ｼｳ繧剃ｻ｣蜈･
fea$Embarked[fea$Embarked==""] = "S"
# 繝吶け繝医Ν縺ｮ隕∫ｴ?繧剃ｻｲ髢灘酔螢ｫ繧定ｿ代￥縺ｫ荳ｦ縺ｹ縺ｦ譁ｰ縺励＞繝吶け繝医Ν繧剃ｽ懊ｋ
fea$Sex      <- as.factor(fea$Sex)
fea$Embarked <- as.factor(fea$Embarked)
return(fea)
}
#蜿り?(fea$Age[is.na(fea$Age)])#######
# P <- matrix(c(1,2,NA,4),2,2)
# P[is.na(P)] <- 1
# P
#####################################
#荳翫〒菴懊▲縺滄未謨ｰextractFeatures縺ｫtrain繝?繝ｼ繧ｿ繧剃ｻ｣蜈･
#ntree縺ｯ譛ｨ縺ｮ謨ｰ縲ゅョ繝輔か繝ｫ繝医?ｯ500
rf <- randomForest(extractFeatures(train), as.factor(train$Survived), ntree=100, importance=TRUE)
# test縺ｮID繧剃ｽｿ縺｣縺滓眠縺励＞繝?繝ｼ繧ｿ繝輔Ξ繝ｼ繝?繧剃ｽ懊ｋ
submission <- data.frame(PassengerId = test$PassengerId)
#predict縺ｯ?ｼ後Δ繝?繝ｫ?ｼ医％縺薙〒縺ｯrf?ｼ峨→?ｼ後ョ繝ｼ繧ｿ繝輔Ξ繝ｼ繝?繧剃ｸ弱∴繧九→蠢懃ｭ泌､画焚繧定ｿ斐＠縺ｦ縺上ｌ繧?
submission$Survived <- predict(rf, extractFeatures(test))
write.csv(submission, file = "1_random_forest_r_submission.csv", row.names=FALSE)
#importance縺ｯ?ｼ檎音蠕ｴ驥上?ｮ驥崎ｦ∝ｺｦ繧定ｨ育ｮ励☆繧矩未謨ｰ
#http://alfredplpl.hatenablog.com/entry/2013/12/24/225420
imp <- importance(rf, type=1)
featureImportance <- data.frame(Feature=row.names(imp), Importance=imp[,1])
p <- ggplot(featureImportance, aes(x=reorder(Feature, Importance), y=Importance)) +
geom_bar(stat="identity", fill="#53cfff") +
coord_flip() +
theme_light(base_size=20) +
xlab("") +
ylab("Importance") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title=element_text(size=18))
ggsave("2_feature_importance.png", p)
# This script trains a Random Forest model based on the data,
# saves a sample submission, and plots the relative importance
# of the variables in making predictions
# Download 1_random_forest_r_submission.csv from the output below
# and submit it through https://www.kaggle.com/c/titanic-gettingStarted/submissions/attach
# to enter this getting started competition!
#libraryを読み込む
library(ggplot2)
library(randomForest)
#libraryを読み込む
#set.seedは乱数を記憶しておく装置
set.seed(1)
#train dataとtest dataを読み込む
train <- read.csv("../data/train.csv", stringsAsFactors=FALSE)
test  <- read.csv("../data/test.csv",  stringsAsFactors=FALSE)
#extractFeatures()という関数を定義する
#各変数をfreaturesでまとめる
extractFeatures <- function(data) {
features <- c("Pclass",
"Age",
"Sex",
"Parch",
"SibSp",
"Fare",
"Embarked")
fea <- data[,features]
# NAに-1を代入
fea$Age[is.na(fea$Age)] <- -1
# NAに運賃の中央値を代入
fea$Fare[is.na(fea$Fare)] <- median(fea$Fare, na.rm=TRUE)
# ==""で文字列かどうかを判定。TrueならＳを代入
fea$Embarked[fea$Embarked==""] = "S"
# ベクトルの要素を仲間同士を近くに並べて新しいベクトルを作る
fea$Sex      <- as.factor(fea$Sex)
fea$Embarked <- as.factor(fea$Embarked)
return(fea)
}
#参考(fea$Age[is.na(fea$Age)])#######
# P <- matrix(c(1,2,NA,4),2,2)
# P[is.na(P)] <- 1
# P
#####################################
#上で作った関数extractFeaturesにtrainデータを代入
#ntreeは木の数。デフォルトは500
rf <- randomForest(extractFeatures(train), as.factor(train$Survived), ntree=100, importance=TRUE)
# testのIDを使った新しいデータフレームを作る
submission <- data.frame(PassengerId = test$PassengerId)
#predictは，モデル（ここではrf）と，データフレームを与えると応答変数を返してくれる
submission$Survived <- predict(rf, extractFeatures(test))
write.csv(submission, file = "1_random_forest_r_submission.csv", row.names=FALSE)
#importanceは，特徴量の重要度を計算する関数
#http://alfredplpl.hatenablog.com/entry/2013/12/24/225420
imp <- importance(rf, type=1)
featureImportance <- data.frame(Feature=row.names(imp), Importance=imp[,1])
p <- ggplot(featureImportance, aes(x=reorder(Feature, Importance), y=Importance)) +
geom_bar(stat="identity", fill="#53cfff") +
coord_flip() +
theme_light(base_size=20) +
xlab("") +
ylab("Importance") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title=element_text(size=18))
ggsave("2_feature_importance.png", p)
# This script trains a Random Forest model based on the data,
# saves a sample submission, and plots the relative importance
# of the variables in making predictions
# Download 1_random_forest_r_submission.csv from the output below
# and submit it through https://www.kaggle.com/c/titanic-gettingStarted/submissions/attach
# to enter this getting started competition!
#library繧定ｪｭ縺ｿ霎ｼ繧
library(ggplot2)
library(randomForest)
#library繧定ｪｭ縺ｿ霎ｼ繧
#set.seed縺ｯ荵ｱ謨ｰ繧定ｨ俶?ｶ縺励※縺翫￥陬?鄂ｮ
set.seed(1)
#train data縺ｨtest data繧定ｪｭ縺ｿ霎ｼ繧
train <- read.csv("../data/train.csv", stringsAsFactors=FALSE)
test  <- read.csv("../datatest.csv",  stringsAsFactors=FALSE)
#extractFeatures()縺ｨ縺?縺?髢｢謨ｰ繧貞ｮ夂ｾｩ縺吶ｋ
#蜷?螟画焚繧断reatures縺ｧ縺ｾ縺ｨ繧√ｋ
extractFeatures <- function(data) {
features <- c("Pclass",
"Age",
"Sex",
"Parch",
"SibSp",
"Fare",
"Embarked")
fea <- data[,features]
# NA縺ｫ-1繧剃ｻ｣蜈･
fea$Age[is.na(fea$Age)] <- -1
# NA縺ｫ驕玖ｳ?縺ｮ荳ｭ螟ｮ蛟､繧剃ｻ｣蜈･
fea$Fare[is.na(fea$Fare)] <- median(fea$Fare, na.rm=TRUE)
# ==""縺ｧ譁?蟄怜?励°縺ｩ縺?縺九ｒ蛻､螳壹５rue縺ｪ繧会ｼｳ繧剃ｻ｣蜈･
fea$Embarked[fea$Embarked==""] = "S"
# 繝吶け繝医Ν縺ｮ隕∫ｴ?繧剃ｻｲ髢灘酔螢ｫ繧定ｿ代￥縺ｫ荳ｦ縺ｹ縺ｦ譁ｰ縺励＞繝吶け繝医Ν繧剃ｽ懊ｋ
fea$Sex      <- as.factor(fea$Sex)
fea$Embarked <- as.factor(fea$Embarked)
return(fea)
}
#蜿り?(fea$Age[is.na(fea$Age)])#######
# P <- matrix(c(1,2,NA,4),2,2)
# P[is.na(P)] <- 1
# P
#####################################
#荳翫〒菴懊▲縺滄未謨ｰextractFeatures縺ｫtrain繝?繝ｼ繧ｿ繧剃ｻ｣蜈･
#ntree縺ｯ譛ｨ縺ｮ謨ｰ縲ゅョ繝輔か繝ｫ繝医?ｯ500
rf <- randomForest(extractFeatures(train), as.factor(train$Survived), ntree=100, importance=TRUE)
# test縺ｮID繧剃ｽｿ縺｣縺滓眠縺励＞繝?繝ｼ繧ｿ繝輔Ξ繝ｼ繝?繧剃ｽ懊ｋ
submission <- data.frame(PassengerId = test$PassengerId)
#predict縺ｯ?ｼ後Δ繝?繝ｫ?ｼ医％縺薙〒縺ｯrf?ｼ峨→?ｼ後ョ繝ｼ繧ｿ繝輔Ξ繝ｼ繝?繧剃ｸ弱∴繧九→蠢懃ｭ泌､画焚繧定ｿ斐＠縺ｦ縺上ｌ繧?
submission$Survived <- predict(rf, extractFeatures(test))
write.csv(submission, file = "1_random_forest_r_submission.csv", row.names=FALSE)
#importance縺ｯ?ｼ檎音蠕ｴ驥上?ｮ驥崎ｦ∝ｺｦ繧定ｨ育ｮ励☆繧矩未謨ｰ
#http://alfredplpl.hatenablog.com/entry/2013/12/24/225420
imp <- importance(rf, type=1)
featureImportance <- data.frame(Feature=row.names(imp), Importance=imp[,1])
p <- ggplot(featureImportance, aes(x=reorder(Feature, Importance), y=Importance)) +
geom_bar(stat="identity", fill="#53cfff") +
coord_flip() +
theme_light(base_size=20) +
xlab("") +
ylab("Importance") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title=element_text(size=18))
ggsave("2_feature_importance.png", p)
# This script trains a Random Forest model based on the data,
# saves a sample submission, and plots the relative importance
# of the variables in making predictions
# Download 1_random_forest_r_submission.csv from the output below
# and submit it through https://www.kaggle.com/c/titanic-gettingStarted/submissions/attach
# to enter this getting started competition!
#libraryを読み込む
library(ggplot2)
library(randomForest)
#libraryを読み込む
#set.seedは乱数を記憶しておく装置
set.seed(1)
#train dataとtest dataを読み込む
train <- read.csv("../data/train.csv", stringsAsFactors=FALSE)
test  <- read.csv("../datatest.csv",  stringsAsFactors=FALSE)
#extractFeatures()という関数を定義する
#各変数をfreaturesでまとめる
extractFeatures <- function(data) {
features <- c("Pclass",
"Age",
"Sex",
"Parch",
"SibSp",
"Fare",
"Embarked")
fea <- data[,features]
# NAに-1を代入
fea$Age[is.na(fea$Age)] <- -1
# NAに運賃の中央値を代入
fea$Fare[is.na(fea$Fare)] <- median(fea$Fare, na.rm=TRUE)
# ==""で文字列かどうかを判定。TrueならＳを代入
fea$Embarked[fea$Embarked==""] = "S"
# ベクトルの要素を仲間同士を近くに並べて新しいベクトルを作る
fea$Sex      <- as.factor(fea$Sex)
fea$Embarked <- as.factor(fea$Embarked)
return(fea)
}
#参考(fea$Age[is.na(fea$Age)])#######
# P <- matrix(c(1,2,NA,4),2,2)
# P[is.na(P)] <- 1
# P
#####################################
#上で作った関数extractFeaturesにtrainデータを代入
#ntreeは木の数。デフォルトは500
rf <- randomForest(extractFeatures(train), as.factor(train$Survived), ntree=100, importance=TRUE)
# testのIDを使った新しいデータフレームを作る
submission <- data.frame(PassengerId = test$PassengerId)
#predictは，モデル（ここではrf）と，データフレームを与えると応答変数を返してくれる
submission$Survived <- predict(rf, extractFeatures(test))
write.csv(submission, file = "1_random_forest_r_submission.csv", row.names=FALSE)
#importanceは，特徴量の重要度を計算する関数
#http://alfredplpl.hatenablog.com/entry/2013/12/24/225420
imp <- importance(rf, type=1)
featureImportance <- data.frame(Feature=row.names(imp), Importance=imp[,1])
p <- ggplot(featureImportance, aes(x=reorder(Feature, Importance), y=Importance)) +
geom_bar(stat="identity", fill="#53cfff") +
coord_flip() +
theme_light(base_size=20) +
xlab("") +
ylab("Importance") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title=element_text(size=18))
ggsave("2_feature_importance.png", p)
# This script trains a Random Forest model based on the data,
# saves a sample submission, and plots the relative importance
# of the variables in making predictions
# Download 1_random_forest_r_submission.csv from the output below
# and submit it through https://www.kaggle.com/c/titanic-gettingStarted/submissions/attach
# to enter this getting started competition!
#library繧定ｪｭ縺ｿ霎ｼ繧
library(ggplot2)
library(randomForest)
#library繧定ｪｭ縺ｿ霎ｼ繧
#set.seed縺ｯ荵ｱ謨ｰ繧定ｨ俶?ｶ縺励※縺翫￥陬?鄂ｮ
set.seed(1)
#train data縺ｨtest data繧定ｪｭ縺ｿ霎ｼ繧
train <- read.csv("../data/train.csv", stringsAsFactors=FALSE)
test  <- read.csv("../datatest.csv",  stringsAsFactors=FALSE)
#extractFeatures()縺ｨ縺?縺?髢｢謨ｰ繧貞ｮ夂ｾｩ縺吶ｋ
#蜷?螟画焚繧断reatures縺ｧ縺ｾ縺ｨ繧√ｋ
extractFeatures <- function(data) {
features <- c("Pclass",
"Age",
"Sex",
"Parch",
"SibSp",
"Fare",
"Embarked")
fea <- data[,features]
# NA縺ｫ-1繧剃ｻ｣蜈･
fea$Age[is.na(fea$Age)] <- -1
# NA縺ｫ驕玖ｳ?縺ｮ荳ｭ螟ｮ蛟､繧剃ｻ｣蜈･
fea$Fare[is.na(fea$Fare)] <- median(fea$Fare, na.rm=TRUE)
# ==""縺ｧ譁?蟄怜?励°縺ｩ縺?縺九ｒ蛻､螳壹５rue縺ｪ繧会ｼｳ繧剃ｻ｣蜈･
fea$Embarked[fea$Embarked==""] = "S"
# 繝吶け繝医Ν縺ｮ隕∫ｴ?繧剃ｻｲ髢灘酔螢ｫ繧定ｿ代￥縺ｫ荳ｦ縺ｹ縺ｦ譁ｰ縺励＞繝吶け繝医Ν繧剃ｽ懊ｋ
fea$Sex      <- as.factor(fea$Sex)
fea$Embarked <- as.factor(fea$Embarked)
return(fea)
}
#蜿り?(fea$Age[is.na(fea$Age)])#######
# P <- matrix(c(1,2,NA,4),2,2)
# P[is.na(P)] <- 1
# P
#####################################
#荳翫〒菴懊▲縺滄未謨ｰextractFeatures縺ｫtrain繝?繝ｼ繧ｿ繧剃ｻ｣蜈･
#ntree縺ｯ譛ｨ縺ｮ謨ｰ縲ゅョ繝輔か繝ｫ繝医?ｯ500
rf <- randomForest(extractFeatures(train), as.factor(train$Survived), ntree=100, importance=TRUE)
# test縺ｮID繧剃ｽｿ縺｣縺滓眠縺励＞繝?繝ｼ繧ｿ繝輔Ξ繝ｼ繝?繧剃ｽ懊ｋ
submission <- data.frame(PassengerId = test$PassengerId)
#predict縺ｯ?ｼ後Δ繝?繝ｫ?ｼ医％縺薙〒縺ｯrf?ｼ峨→?ｼ後ョ繝ｼ繧ｿ繝輔Ξ繝ｼ繝?繧剃ｸ弱∴繧九→蠢懃ｭ泌､画焚繧定ｿ斐＠縺ｦ縺上ｌ繧?
submission$Survived <- predict(rf, extractFeatures(test))
write.csv(submission, file = "1_random_forest_r_submission.csv", row.names=FALSE)
#importance縺ｯ?ｼ檎音蠕ｴ驥上?ｮ驥崎ｦ∝ｺｦ繧定ｨ育ｮ励☆繧矩未謨ｰ
#http://alfredplpl.hatenablog.com/entry/2013/12/24/225420
imp <- importance(rf, type=1)
featureImportance <- data.frame(Feature=row.names(imp), Importance=imp[,1])
p <- ggplot(featureImportance, aes(x=reorder(Feature, Importance), y=Importance)) +
geom_bar(stat="identity", fill="#53cfff") +
coord_flip() +
theme_light(base_size=20) +
xlab("") +
ylab("Importance") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title=element_text(size=18))
ggsave("2_feature_importance.png", p)
# This script trains a Random Forest model based on the data,
# saves a sample submission, and plots the relative importance
# of the variables in making predictions
# Download 1_random_forest_r_submission.csv from the output below
# and submit it through https://www.kaggle.com/c/titanic-gettingStarted/submissions/attach
# to enter this getting started competition!
#library繧定ｪｭ縺ｿ霎ｼ繧
library(ggplot2)
library(randomForest)
#library繧定ｪｭ縺ｿ霎ｼ繧
#set.seed縺ｯ荵ｱ謨ｰ繧定ｨ俶?ｶ縺励※縺翫￥陬?鄂ｮ
set.seed(1)
#train data縺ｨtest data繧定ｪｭ縺ｿ霎ｼ繧
train <- read.csv("../data/train.csv", stringsAsFactors=FALSE)
test  <- read.csv("../data/test.csv",  stringsAsFactors=FALSE)
#extractFeatures()縺ｨ縺?縺?髢｢謨ｰ繧貞ｮ夂ｾｩ縺吶ｋ
#蜷?螟画焚繧断reatures縺ｧ縺ｾ縺ｨ繧√ｋ
extractFeatures <- function(data) {
features <- c("Pclass",
"Age",
"Sex",
"Parch",
"SibSp",
"Fare",
"Embarked")
fea <- data[,features]
# NA縺ｫ-1繧剃ｻ｣蜈･
fea$Age[is.na(fea$Age)] <- -1
# NA縺ｫ驕玖ｳ?縺ｮ荳ｭ螟ｮ蛟､繧剃ｻ｣蜈･
fea$Fare[is.na(fea$Fare)] <- median(fea$Fare, na.rm=TRUE)
# ==""縺ｧ譁?蟄怜?励°縺ｩ縺?縺九ｒ蛻､螳壹５rue縺ｪ繧会ｼｳ繧剃ｻ｣蜈･
fea$Embarked[fea$Embarked==""] = "S"
# 繝吶け繝医Ν縺ｮ隕∫ｴ?繧剃ｻｲ髢灘酔螢ｫ繧定ｿ代￥縺ｫ荳ｦ縺ｹ縺ｦ譁ｰ縺励＞繝吶け繝医Ν繧剃ｽ懊ｋ
fea$Sex      <- as.factor(fea$Sex)
fea$Embarked <- as.factor(fea$Embarked)
return(fea)
}
#蜿り?(fea$Age[is.na(fea$Age)])#######
# P <- matrix(c(1,2,NA,4),2,2)
# P[is.na(P)] <- 1
# P
#####################################
#荳翫〒菴懊▲縺滄未謨ｰextractFeatures縺ｫtrain繝?繝ｼ繧ｿ繧剃ｻ｣蜈･
#ntree縺ｯ譛ｨ縺ｮ謨ｰ縲ゅョ繝輔か繝ｫ繝医?ｯ500
rf <- randomForest(extractFeatures(train), as.factor(train$Survived), ntree=100, importance=TRUE)
# test縺ｮID繧剃ｽｿ縺｣縺滓眠縺励＞繝?繝ｼ繧ｿ繝輔Ξ繝ｼ繝?繧剃ｽ懊ｋ
submission <- data.frame(PassengerId = test$PassengerId)
#predict縺ｯ?ｼ後Δ繝?繝ｫ?ｼ医％縺薙〒縺ｯrf?ｼ峨→?ｼ後ョ繝ｼ繧ｿ繝輔Ξ繝ｼ繝?繧剃ｸ弱∴繧九→蠢懃ｭ泌､画焚繧定ｿ斐＠縺ｦ縺上ｌ繧?
submission$Survived <- predict(rf, extractFeatures(test))
write.csv(submission, file = "1_random_forest_r_submission.csv", row.names=FALSE)
#importance縺ｯ?ｼ檎音蠕ｴ驥上?ｮ驥崎ｦ∝ｺｦ繧定ｨ育ｮ励☆繧矩未謨ｰ
#http://alfredplpl.hatenablog.com/entry/2013/12/24/225420
imp <- importance(rf, type=1)
featureImportance <- data.frame(Feature=row.names(imp), Importance=imp[,1])
p <- ggplot(featureImportance, aes(x=reorder(Feature, Importance), y=Importance)) +
geom_bar(stat="identity", fill="#53cfff") +
coord_flip() +
theme_light(base_size=20) +
xlab("") +
ylab("Importance") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title=element_text(size=18))
ggsave("2_feature_importance.png", p)
# This script trains a Random Forest model based on the data,
# saves a sample submission, and plots the relative importance
# of the variables in making predictions
# Download 1_random_forest_r_submission.csv from the output below
# and submit it through https://www.kaggle.com/c/titanic-gettingStarted/submissions/attach
# to enter this getting started competition!
#library繧定ｪｭ縺ｿ霎ｼ繧
library(ggplot2)
library(randomForest)
#library繧定ｪｭ縺ｿ霎ｼ繧
#set.seed縺ｯ荵ｱ謨ｰ繧定ｨ俶?ｶ縺励※縺翫￥陬?鄂ｮ
set.seed(1)
#train data縺ｨtest data繧定ｪｭ縺ｿ霎ｼ繧
train <- read.csv("../data/train.csv", stringsAsFactors=FALSE)
test  <- read.csv("../data/test.csv",  stringsAsFactors=FALSE)
#extractFeatures()縺ｨ縺?縺?髢｢謨ｰ繧貞ｮ夂ｾｩ縺吶ｋ
#蜷?螟画焚繧断reatures縺ｧ縺ｾ縺ｨ繧√ｋ
extractFeatures <- function(data) {
features <- c("Pclass",
"Age",
"Sex",
"Parch",
"SibSp",
"Fare",
"Embarked")
fea <- data[,features]
# NA縺ｫ-1繧剃ｻ｣蜈･
fea$Age[is.na(fea$Age)] <- -1
# NA縺ｫ驕玖ｳ?縺ｮ荳ｭ螟ｮ蛟､繧剃ｻ｣蜈･
fea$Fare[is.na(fea$Fare)] <- median(fea$Fare, na.rm=TRUE)
# ==""縺ｧ譁?蟄怜?励°縺ｩ縺?縺九ｒ蛻､螳壹５rue縺ｪ繧会ｼｳ繧剃ｻ｣蜈･
fea$Embarked[fea$Embarked==""] = "S"
# 繝吶け繝医Ν縺ｮ隕∫ｴ?繧剃ｻｲ髢灘酔螢ｫ繧定ｿ代￥縺ｫ荳ｦ縺ｹ縺ｦ譁ｰ縺励＞繝吶け繝医Ν繧剃ｽ懊ｋ
fea$Sex      <- as.factor(fea$Sex)
fea$Embarked <- as.factor(fea$Embarked)
return(fea)
}
#蜿り?(fea$Age[is.na(fea$Age)])#######
# P <- matrix(c(1,2,NA,4),2,2)
# P[is.na(P)] <- 1
# P
#####################################
#荳翫〒菴懊▲縺滄未謨ｰextractFeatures縺ｫtrain繝?繝ｼ繧ｿ繧剃ｻ｣蜈･
#ntree縺ｯ譛ｨ縺ｮ謨ｰ縲ゅョ繝輔か繝ｫ繝医?ｯ500
rf <- randomForest(extractFeatures(train), as.factor(train$Survived), ntree=100, importance=TRUE)
# test縺ｮID繧剃ｽｿ縺｣縺滓眠縺励＞繝?繝ｼ繧ｿ繝輔Ξ繝ｼ繝?繧剃ｽ懊ｋ
submission <- data.frame(PassengerId = test$PassengerId)
#predict縺ｯ?ｼ後Δ繝?繝ｫ?ｼ医％縺薙〒縺ｯrf?ｼ峨→?ｼ後ョ繝ｼ繧ｿ繝輔Ξ繝ｼ繝?繧剃ｸ弱∴繧九→蠢懃ｭ泌､画焚繧定ｿ斐＠縺ｦ縺上ｌ繧?
submission$Survived <- predict(rf, extractFeatures(test))
write.csv(submission, file = "1_random_forest_r_submission.csv", row.names=FALSE)
#importance縺ｯ?ｼ檎音蠕ｴ驥上?ｮ驥崎ｦ∝ｺｦ繧定ｨ育ｮ励☆繧矩未謨ｰ
#http://alfredplpl.hatenablog.com/entry/2013/12/24/225420
imp <- importance(rf, type=1)
featureImportance <- data.frame(Feature=row.names(imp), Importance=imp[,1])
p <- ggplot(featureImportance, aes(x=reorder(Feature, Importance), y=Importance)) +
geom_bar(stat="identity", fill="#53cfff") +
coord_flip() +
theme_light(base_size=20) +
xlab("") +
ylab("Importance") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title=element_text(size=18))
ggsave("2_feature_importance.png", p)
# This script trains a Random Forest model based on the data,
# saves a sample submission, and plots the relative importance
# of the variables in making predictions
# Download 1_random_forest_r_submission.csv from the output below
# and submit it through https://www.kaggle.com/c/titanic-gettingStarted/submissions/attach
# to enter this getting started competition!
#library繧定ｪｭ縺ｿ霎ｼ繧
library(ggplot2)
library(randomForest)
#library繧定ｪｭ縺ｿ霎ｼ繧
#set.seed縺ｯ荵ｱ謨ｰ繧定ｨ俶?ｶ縺励※縺翫￥陬?鄂ｮ
set.seed(1)
#train data縺ｨtest data繧定ｪｭ縺ｿ霎ｼ繧
train <- read.csv("../data/train.csv", stringsAsFactors=FALSE)
test  <- read.csv("../data/test.csv",  stringsAsFactors=FALSE)
#extractFeatures()縺ｨ縺?縺?髢｢謨ｰ繧貞ｮ夂ｾｩ縺吶ｋ
#蜷?螟画焚繧断reatures縺ｧ縺ｾ縺ｨ繧√ｋ
extractFeatures <- function(data) {
features <- c("Pclass",
"Age",
"Sex",
"Parch",
"SibSp",
"Fare",
"Embarked")
fea <- data[,features]
# NA縺ｫ-1繧剃ｻ｣蜈･
fea$Age[is.na(fea$Age)] <- -1
# NA縺ｫ驕玖ｳ?縺ｮ荳ｭ螟ｮ蛟､繧剃ｻ｣蜈･
fea$Fare[is.na(fea$Fare)] <- median(fea$Fare, na.rm=TRUE)
# ==""縺ｧ譁?蟄怜?励°縺ｩ縺?縺九ｒ蛻､螳壹５rue縺ｪ繧会ｼｳ繧剃ｻ｣蜈･
fea$Embarked[fea$Embarked==""] = "S"
# 繝吶け繝医Ν縺ｮ隕∫ｴ?繧剃ｻｲ髢灘酔螢ｫ繧定ｿ代￥縺ｫ荳ｦ縺ｹ縺ｦ譁ｰ縺励＞繝吶け繝医Ν繧剃ｽ懊ｋ
fea$Sex      <- as.factor(fea$Sex)
fea$Embarked <- as.factor(fea$Embarked)
return(fea)
}
#蜿り?(fea$Age[is.na(fea$Age)])#######
# P <- matrix(c(1,2,NA,4),2,2)
# P[is.na(P)] <- 1
# P
#####################################
#荳翫〒菴懊▲縺滄未謨ｰextractFeatures縺ｫtrain繝?繝ｼ繧ｿ繧剃ｻ｣蜈･
#ntree縺ｯ譛ｨ縺ｮ謨ｰ縲ゅョ繝輔か繝ｫ繝医?ｯ500
rf <- randomForest(extractFeatures(train), as.factor(train$Survived), ntree=100, importance=TRUE)
# test縺ｮID繧剃ｽｿ縺｣縺滓眠縺励＞繝?繝ｼ繧ｿ繝輔Ξ繝ｼ繝?繧剃ｽ懊ｋ
submission <- data.frame(PassengerId = test$PassengerId)
#predict縺ｯ?ｼ後Δ繝?繝ｫ?ｼ医％縺薙〒縺ｯrf?ｼ峨→?ｼ後ョ繝ｼ繧ｿ繝輔Ξ繝ｼ繝?繧剃ｸ弱∴繧九→蠢懃ｭ泌､画焚繧定ｿ斐＠縺ｦ縺上ｌ繧?
submission$Survived <- predict(rf, extractFeatures(test))
write.csv(submission, file = "1_random_forest_r_submission.csv", row.names=FALSE)
#importance縺ｯ?ｼ檎音蠕ｴ驥上?ｮ驥崎ｦ∝ｺｦ繧定ｨ育ｮ励☆繧矩未謨ｰ
#http://alfredplpl.hatenablog.com/entry/2013/12/24/225420
imp <- importance(rf, type=1)
featureImportance <- data.frame(Feature=row.names(imp), Importance=imp[,1])
p <- ggplot(featureImportance, aes(x=reorder(Feature, Importance), y=Importance)) +
geom_bar(stat="identity", fill="#53cfff") +
coord_flip() +
theme_light(base_size=20) +
xlab("") +
ylab("Importance") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title=element_text(size=18))
ggsave("2_feature_importance.png", p)
